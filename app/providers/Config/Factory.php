<?php

/*
 +------------------------------------------------------------------------+
 | Phosphorum                                                             |
 +------------------------------------------------------------------------+
 | Copyright (c) 2013-2016 Phalcon Team and contributors                  |
 +------------------------------------------------------------------------+
 | This source file is subject to the New BSD License that is bundled     |
 | with this package in the file docs/LICENSE.txt.                        |
 |                                                                        |
 | If you did not receive a copy of the license and are unable to         |
 | obtain it through the world-wide-web, please send an email             |
 | to license@phalconphp.com so we can send you a copy immediately.       |
 +------------------------------------------------------------------------+
*/

namespace Phosphorum\Providers\Config;

use Phalcon\Config;
use League\Flysystem\Filesystem;
use League\Flysystem\Adapter\Local;

/**
 * Phosphorum\Providers\Config\Factory
 *
 * @package Phosphorum\Providers\Config
 */
class Factory
{
    /**
     * Create configuration object.
     *
     * @param  array  $providers
     * @param  string $stage
     * @return Config
     */
    public static function create(array $providers = [], $stage = null)
    {
        $stage = $stage ?: APPLICATION_ENV;
        $config = self::load($providers, $stage);

        return $config;
    }

    /**
     * Load all configuration.
     *
     * @param  array $providers
     * @param  $stage
     * @return Config
     */
    protected static function load(array $providers, $stage)
    {
        $config = new Config();
        $merge  = self::merge();

        $adapter    = new Local(app_path());
        $filesystem = new Filesystem($adapter);

        if ($filesystem->has('cache/config/cached.php') && $stage === ENV_PRODUCTION) {
            /** @noinspection PhpIncludeInspection */
            $merge($config, include_once(cache_path('config/cached.php')));

            return $config;
        }

        foreach ($providers as $provider) {
            if ($filesystem->has("config/$provider.php")) {
                /** @noinspection PhpIncludeInspection */
                $merge($config, include_once(config_path("$provider.php")), $provider == 'config' ? null : $provider);
            }
        }

        if ($stage === ENV_PRODUCTION && !$filesystem->has('cache/config/cached.php')) {
            $filesystem->put(
                'cache/config/cached.php',
                "<?php \n\n// AUTOGENERATED FILE. DO NOT EDIT\n\nreturn " .
                var_export($config->toArray(), true) .
                ';'
            );
        }

        return $config;
    }

    protected static function merge()
    {
        return function (Config &$config, $toMerge, $name = null) {
            if (is_array($toMerge)) {
                $toMerge = new Config($toMerge);
            }

            if ($toMerge instanceof Config) {
                if (!$name) {
                    return $config->merge($toMerge);
                }

                if (!$config->offsetExists($name) || !$config->{$name} instanceof Config) {
                    $config->offsetSet($name, new Config());
                }

                return $config->get($name)->merge($toMerge);
            }

            return null;
        };
    }
}
